"""
NexusOptim IA - Home Edition
Versi√≥n dom√©stica para todos los hogares de Costa Rica

Sistema completo familiar:
- Asistente dom√©stico inteligente
- Educaci√≥n personalizada para toda la familia
- Turismo local y recomendaciones
- Monitoreo del hogar inteligente
- Gesti√≥n financiera familiar
- Salud y bienestar familiar

Copyright (c) 2025 OpenNexus - NexusOptim IA
En cada hogar costarricense - Democratizando la IA
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext, Canvas
import json
import threading
import time
from datetime import datetime, timedelta
import random
import os
import requests
from PIL import Image, ImageTk
import sqlite3
import uuid

class NexusOptimHomeEdition:
    """Versi√≥n dom√©stica de NexusOptim IA para todos los hogares de Costa Rica"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("üè† NexusOptim IA - Hogar Inteligente")
        self.root.geometry("1200x800")
        self.root.configure(bg='#0f1419')
        
        # Mostrar banners de bienvenida
        self.show_startup_banners()
        
        # Configuraci√≥n familiar
        self.family_config = {
            'home_name': 'Casa Familia Costa Rica',
            'location': 'San Jos√©, Costa Rica',
            'family_members': [
                {'name': 'Pap√°', 'age': 45, 'interests': ['noticias', 'deportes', 'trabajo']},
                {'name': 'Mam√°', 'age': 42, 'interests': ['cocina', 'salud', 'familia']},
                {'name': 'Ana', 'age': 16, 'interests': ['m√∫sica', 'estudios', 'tecnolog√≠a']},
                {'name': 'Carlos', 'age': 12, 'interests': ['juegos', 'ciencias', 'deportes']}
            ],
            'household_devices': ['smart_tv', 'alexa', 'phones', 'tablets', 'security_cameras'],
            'subscription_tier': 'familiar_premium'  # Gratis para todos los hogares CR
        }
        
        # Base de datos local para cada hogar
        self.init_home_database()
        
        # Estado del hogar
        self.home_status = {
            'security': 'armed',
            'temperature': 24,
            'energy_usage': 85,
            'internet_status': 'connected',
            'family_present': ['Mam√°', 'Carlos']
        }
        
        self.setup_ui()
        self.start_home_services()
        
    def init_home_database(self):
        """Inicializar base de datos local del hogar"""
        self.db_path = 'nexusoptim_hogar.db'
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # Tabla de actividades familiares
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS family_activities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                member_name TEXT,
                activity_type TEXT,
                description TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Tabla de configuraciones del hogar
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS home_settings (
                key TEXT PRIMARY KEY,
                value TEXT,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Tabla de recomendaciones familiares
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS family_recommendations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT,
                title TEXT,
                description TEXT,
                priority INTEGER,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # Tabla de reportes de aver√≠as
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS damage_reports (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                report_id TEXT UNIQUE,
                report_type TEXT,
                location TEXT,
                description TEXT,
                priority TEXT,
                status TEXT DEFAULT 'pendiente',
                reporter_name TEXT,
                contact_info TEXT,
                coordinates TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                resolution_date DATETIME,
                assigned_technician TEXT,
                estimated_repair_time TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def setup_ui(self):
        """Configurar interfaz familiar"""
        # Header familiar
        header_frame = tk.Frame(self.root, bg='#1e2328', height=80)
        header_frame.pack(fill='x', pady=0)
        header_frame.pack_propagate(False)
        
        # Logo y bienvenida
        welcome_frame = tk.Frame(header_frame, bg='#1e2328')
        welcome_frame.pack(expand=True)
        
        title_label = tk.Label(welcome_frame, 
                              text="üè† NexusOptim IA - Hogar Inteligente", 
                              font=('Arial', 20, 'bold'), 
                              fg='#00d4aa', bg='#1e2328')
        title_label.pack(pady=5)
        
        home_label = tk.Label(welcome_frame, 
                             text=f"üá®üá∑ {self.family_config['home_name']} ‚Ä¢ {self.family_config['location']}", 
                             font=('Arial', 12), 
                             fg='#ffd700', bg='#1e2328')
        home_label.pack()
        
        # Status bar
        status_frame = tk.Frame(self.root, bg='#2d3748', height=40)
        status_frame.pack(fill='x')
        status_frame.pack_propagate(False)
        
        status_info = tk.Frame(status_frame, bg='#2d3748')
        status_info.pack(expand=True)
        
        # Indicadores de estado
        indicators = [
            ("üîí", f"Seguridad: {self.home_status['security']}", '#00d4aa'),
            ("üå°Ô∏è", f"{self.home_status['temperature']}¬∞C", '#4a9eff'),
            ("‚ö°", f"Energ√≠a: {self.home_status['energy_usage']}%", '#ff6b6b'),
            ("üåê", f"Internet: {self.home_status['internet_status']}", '#00d4aa'),
            ("üë•", f"En casa: {len(self.home_status['family_present'])}", '#ffd700')
        ]
        
        for icon, text, color in indicators:
            indicator = tk.Label(status_info, text=f"{icon} {text}", 
                                font=('Arial', 10), fg=color, bg='#2d3748')
            indicator.pack(side='left', padx=15, pady=8)
            
        # Main container
        main_container = tk.Frame(self.root, bg='#0f1419')
        main_container.pack(fill='both', expand=True, padx=10, pady=10)
        
        # Notebook para diferentes secciones
        self.notebook = ttk.Notebook(main_container)
        self.notebook.pack(fill='both', expand=True)
        
        # Configurar estilo familiar
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TNotebook', background='#0f1419')
        style.configure('TNotebook.Tab', background='#1e2328', foreground='white', padding=[15, 10])
        style.map('TNotebook.Tab', background=[('selected', '#00d4aa')], foreground=[('selected', 'black')])
        
        # Crear tabs familiares
        self.create_family_dashboard_tab()
        self.create_education_tab()
        self.create_entertainment_tab()
        self.create_home_automation_tab()
        self.create_family_finance_tab()
        self.create_health_wellness_tab()
        self.create_local_services_tab()
        self.create_damage_reports_tab()  # Nueva tab de reportes
        
    def create_family_dashboard_tab(self):
        """Dashboard principal familiar"""
        dashboard_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(dashboard_frame, text='üè† Casa')
        
        # Bienvenida personalizada
        welcome_frame = tk.LabelFrame(dashboard_frame, text="üëã Bienvenida Familiar", 
                                     bg='#0f1419', fg='#00d4aa', font=('Arial', 12, 'bold'))
        welcome_frame.pack(fill='x', padx=20, pady=10)
        
        current_hour = datetime.now().hour
        if current_hour < 12:
            greeting = "¬°Buenos d√≠as familia!"
        elif current_hour < 18:
            greeting = "¬°Buenas tardes familia!"
        else:
            greeting = "¬°Buenas noches familia!"
            
        welcome_text = f"""
{greeting} üåÖ

üè† Bienvenidos a su hogar inteligente
üë• Miembros en casa: {', '.join(self.home_status['family_present'])}
üìÖ Hoy es {datetime.now().strftime('%A, %d de %B')}
üå§Ô∏è Clima en {self.family_config['location']}: 26¬∞C, parcialmente nublado

üí° Recomendaci√≥n del d√≠a: 
   Hoy es perfecto para una actividad familiar al aire libre.
   ¬øQu√© tal una visita al Parque La Sabana?
        """
        
        welcome_label = tk.Label(welcome_frame, text=welcome_text, 
                                font=('Arial', 11), fg='#cccccc', bg='#0f1419', 
                                justify=tk.LEFT)
        welcome_label.pack(pady=15, padx=20)
        
        # Panel de miembros de la familia
        family_frame = tk.LabelFrame(dashboard_frame, text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Familia", 
                                    bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        family_frame.pack(fill='x', padx=20, pady=10)
        
        family_grid = tk.Frame(family_frame, bg='#0f1419')
        family_grid.pack(pady=15, padx=15)
        
        for i, member in enumerate(self.family_config['family_members']):
            member_card = tk.Frame(family_grid, bg='#1e2328', relief='raised', bd=2)
            member_card.grid(row=0, column=i, padx=10, pady=5, sticky='nsew')
            
            # Status presencia
            status_color = '#00d4aa' if member['name'] in self.home_status['family_present'] else '#666666'
            status_text = 'üü¢ En casa' if member['name'] in self.home_status['family_present'] else '‚ö´ Fuera'
            
            tk.Label(member_card, text=f"üë§ {member['name']}", 
                    font=('Arial', 12, 'bold'), fg='#00d4aa', bg='#1e2328').pack(pady=5)
            
            tk.Label(member_card, text=f"üìÖ {member['age']} a√±os", 
                    font=('Arial', 10), fg='#cccccc', bg='#1e2328').pack(pady=2)
            
            tk.Label(member_card, text=status_text, 
                    font=('Arial', 9), fg=status_color, bg='#1e2328').pack(pady=2)
            
            interests_text = "üéØ " + ", ".join(member['interests'][:2])
            tk.Label(member_card, text=interests_text, 
                    font=('Arial', 8), fg='#888888', bg='#1e2328', wraplength=120).pack(pady=5)
            
        # Configurar grid
        for i in range(len(self.family_config['family_members'])):
            family_grid.columnconfigure(i, weight=1)
            
        # Actividades del d√≠a
        activities_frame = tk.LabelFrame(dashboard_frame, text="üìÖ Actividades de Hoy", 
                                        bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        activities_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        self.activities_text = scrolledtext.ScrolledText(activities_frame, height=10, width=100, 
                                                        bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        self.activities_text.pack(pady=10, padx=10, fill='both', expand=True)
        
        # Actividades simuladas
        sample_activities = """
üìÖ ACTIVIDADES FAMILIARES DEL D√çA

08:00 - ‚òï Desayuno familiar (Toda la familia)
09:30 - üìö Clases virtuales - Ana (Matem√°ticas)
10:00 - üéÆ Tiempo de juego educativo - Carlos
11:00 - üíº Reuni√≥n de trabajo remoto - Pap√°
12:30 - üçΩÔ∏è Almuerzo familiar
14:00 - üìñ Lectura guiada - Carlos y Mam√°
15:30 - üéµ Pr√°ctica de piano - Ana
16:00 - üõí Compras en l√≠nea - Mam√°
17:30 - ‚öΩ F√∫tbol en el parque - Pap√° y Carlos
19:00 - ü•ò Cena familiar
20:00 - üì∫ Pel√≠cula familiar
21:30 - üò¥ Hora de dormir - Carlos
22:00 - üì± Tiempo familiar libre

ü§ñ Sugerencias IA:
‚Ä¢ El clima est√° perfecto para actividades al aire libre
‚Ä¢ Ana tiene examen de ciencias ma√±ana - recordar estudiar
‚Ä¢ Cumplea√±os de la abuela en 3 d√≠as - planificar celebraci√≥n
‚Ä¢ Mantenimiento del auto programado para el viernes
        """
        
        self.activities_text.insert('1.0', sample_activities)
        
    def create_education_tab(self):
        """Tab de educaci√≥n familiar"""
        education_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(education_frame, text='üéì Educaci√≥n')
        
        # Selector de miembro familiar
        selector_frame = tk.Frame(education_frame, bg='#0f1419')
        selector_frame.pack(fill='x', padx=20, pady=10)
        
        tk.Label(selector_frame, text="üë§ Selecciona miembro de la familia:", 
                bg='#0f1419', fg='white', font=('Arial', 12, 'bold')).pack(side='left', padx=10)
        
        self.education_member_var = tk.StringVar(value='Ana')
        member_combo = ttk.Combobox(selector_frame, textvariable=self.education_member_var, 
                                   values=[m['name'] for m in self.family_config['family_members']])
        member_combo.pack(side='left', padx=10)
        member_combo.bind('<<ComboboxSelected>>', self.update_education_content)
        
        # Contenido educativo personalizado
        content_frame = tk.LabelFrame(education_frame, text="üìö Contenido Educativo Personalizado", 
                                     bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        content_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        self.education_content = scrolledtext.ScrolledText(content_frame, height=20, width=100, 
                                                          bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        self.education_content.pack(pady=10, padx=10, fill='both', expand=True)
        
        # Botones de acci√≥n educativa
        edu_buttons_frame = tk.Frame(content_frame, bg='#0f1419')
        edu_buttons_frame.pack(fill='x', padx=10, pady=10)
        
        tk.Button(edu_buttons_frame, text="üéØ Crear Lecci√≥n Personalizada", 
                 command=self.create_family_lesson,
                 bg='#00d4aa', fg='black', font=('Arial', 11, 'bold')).pack(side='left', padx=10)
        
        tk.Button(edu_buttons_frame, text="üìä Ver Progreso", 
                 command=self.show_education_progress,
                 bg='#4a9eff', fg='white', font=('Arial', 11, 'bold')).pack(side='left', padx=10)
        
        tk.Button(edu_buttons_frame, text="üéÆ Juegos Educativos", 
                 command=self.launch_educational_games,
                 bg='#ff6b6b', fg='white', font=('Arial', 11, 'bold')).pack(side='left', padx=10)
        
        self.update_education_content()
        
    def create_entertainment_tab(self):
        """Tab de entretenimiento familiar"""
        entertainment_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(entertainment_frame, text='üé¨ Entretenimiento')
        
        # Recomendaciones familiares
        recommendations_frame = tk.LabelFrame(entertainment_frame, text="üéØ Recomendaciones para la Familia", 
                                             bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        recommendations_frame.pack(fill='x', padx=20, pady=10)
        
        # Grid de recomendaciones
        rec_grid = tk.Frame(recommendations_frame, bg='#0f1419')
        rec_grid.pack(pady=15, padx=15)
        
        entertainment_categories = [
            ("üé¨ Pel√≠culas", "Coco, Encanto, Los Incre√≠bles 2", '#ff6b6b'),
            ("üì∫ Series", "Avatar, Gravity Falls, Bluey", '#4a9eff'),
            ("üéµ M√∫sica", "Jesse & Joy, Manu Chao, Disney", '#00d4aa'),
            ("üéÆ Juegos", "Minecraft, Mario Kart, Just Dance", '#ffd700')
        ]
        
        for i, (category, content, color) in enumerate(entertainment_categories):
            cat_frame = tk.Frame(rec_grid, bg='#1e2328', relief='raised', bd=2)
            cat_frame.grid(row=0, column=i, padx=8, pady=5, sticky='nsew')
            
            tk.Label(cat_frame, text=category, font=('Arial', 12, 'bold'), 
                    fg=color, bg='#1e2328').pack(pady=8)
            
            tk.Label(cat_frame, text=content, font=('Arial', 9), 
                    fg='#cccccc', bg='#1e2328', wraplength=150, justify=tk.CENTER).pack(pady=5, padx=10)
            
            tk.Button(cat_frame, text="‚ñ∂Ô∏è Ver m√°s", 
                     command=lambda c=category: self.show_entertainment_category(c),
                     bg=color, fg='white' if color != '#ffd700' else 'black', 
                     font=('Arial', 8, 'bold')).pack(pady=8)
            
        # Configurar grid
        for i in range(4):
            rec_grid.columnconfigure(i, weight=1)
            
        # Actividades familiares
        activities_ent_frame = tk.LabelFrame(entertainment_frame, text="üè° Actividades en Casa", 
                                            bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        activities_ent_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        activities_info = """
üè° ACTIVIDADES FAMILIARES EN CASA

üé≤ JUEGOS DE MESA:
‚Ä¢ Monopolio Costa Rica Edition
‚Ä¢ Scrabble en Espa√±ol  
‚Ä¢ Uno Familiar
‚Ä¢ Pictionary Digital

üé® ACTIVIDADES CREATIVAS:
‚Ä¢ Dibujo digital familiar
‚Ä¢ Cocina costarricense tradicional
‚Ä¢ Jardiner√≠a en el patio
‚Ä¢ Fotograf√≠a familiar

üé¨ NOCHES TEM√ÅTICAS:
‚Ä¢ Viernes de Pel√≠culas Costarricenses
‚Ä¢ Karaoke Familiar
‚Ä¢ Documentales de Naturaleza
‚Ä¢ Concursos Familiares

üåü EXPERIENCIAS VIRTUALES:
‚Ä¢ Tour virtual por Parques Nacionales CR
‚Ä¢ Museos virtuales del mundo
‚Ä¢ Conciertos en l√≠nea
‚Ä¢ Clases de baile familiar

ü§ñ SUGERENCIAS IA PERSONALIZADAS:
‚Ä¢ Basadas en gustos de cada miembro
‚Ä¢ Considerando horarios familiares
‚Ä¢ Adaptadas al clima y √©poca del a√±o
‚Ä¢ Integradas con calendario familiar
        """
        
        activities_display = scrolledtext.ScrolledText(activities_ent_frame, height=15, width=100, 
                                                      bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        activities_display.pack(pady=10, padx=10, fill='both', expand=True)
        activities_display.insert('1.0', activities_info)
        
    def create_home_automation_tab(self):
        """Tab de automatizaci√≥n del hogar"""
        automation_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(automation_frame, text='üè† Casa Inteligente')
        
        # Control de dispositivos
        devices_frame = tk.LabelFrame(automation_frame, text="üîå Control de Dispositivos", 
                                     bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        devices_frame.pack(fill='x', padx=20, pady=10)
        
        devices_grid = tk.Frame(devices_frame, bg='#0f1419')
        devices_grid.pack(pady=15, padx=15)
        
        # Dispositivos del hogar
        home_devices = [
            ("üí° Luces", "12 dispositivos", "8 encendidas", '#ffd700'),
            ("üå°Ô∏è Clima", "3 termostatos", "24¬∞C promedio", '#4a9eff'),
            ("üîí Seguridad", "6 c√°maras", "Sistema armado", '#00d4aa'),
            ("üì∫ Entretenimiento", "4 pantallas", "2 en uso", '#ff6b6b'),
            ("üè† Sensores", "15 sensores", "Todos activos", '#9b59b6'),
            ("‚ö° Energ√≠a", "Monitor activo", "85% uso normal", '#ff9f43')
        ]
        
        row, col = 0, 0
        for device, count, status, color in home_devices:
            device_card = tk.Frame(devices_grid, bg='#1e2328', relief='raised', bd=2)
            device_card.grid(row=row, column=col, padx=8, pady=8, sticky='nsew')
            
            tk.Label(device_card, text=device, font=('Arial', 12, 'bold'), 
                    fg=color, bg='#1e2328').pack(pady=5)
            
            tk.Label(device_card, text=count, font=('Arial', 10), 
                    fg='#cccccc', bg='#1e2328').pack(pady=2)
            
            tk.Label(device_card, text=status, font=('Arial', 9), 
                    fg='#888888', bg='#1e2328').pack(pady=2)
            
            tk.Button(device_card, text="‚öôÔ∏è Control", 
                     command=lambda d=device: self.control_device(d),
                     bg=color, fg='white' if color != '#ffd700' else 'black', 
                     font=('Arial', 8, 'bold')).pack(pady=5)
            
            col += 1
            if col > 2:
                col = 0
                row += 1
                
        # Configurar grid
        for i in range(3):
            devices_grid.columnconfigure(i, weight=1)
            
        # Automatizaciones activas
        automation_list_frame = tk.LabelFrame(automation_frame, text="ü§ñ Automatizaciones Activas", 
                                             bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        automation_list_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        automation_info = """
ü§ñ AUTOMATIZACIONES FAMILIARES ACTIVAS

‚è∞ RUTINAS MATUTINAS (6:00 - 8:00 AM):
‚Ä¢ Encender luces gradualmente
‚Ä¢ Reproducir m√∫sica suave
‚Ä¢ Preparar temperatura ambiente
‚Ä¢ Mostrar agenda familiar del d√≠a
‚Ä¢ Encender cafetera autom√°tica

üåÖ RUTINAS VESPERTINAS (6:00 - 8:00 PM):
‚Ä¢ Luces c√°lidas autom√°ticas
‚Ä¢ Cerrar cortinas inteligentes
‚Ä¢ Ajustar temperatura nocturna
‚Ä¢ Preparar entretenimiento familiar
‚Ä¢ Activar modo seguridad nocturna

üè† DETECCI√ìN DE PRESENCIA:
‚Ä¢ Luces autom√°ticas al entrar
‚Ä¢ M√∫sica personalizada por miembro
‚Ä¢ Ajuste de temperatura al llegar
‚Ä¢ Notificaciones de llegada/salida
‚Ä¢ Desactivaci√≥n eco-friendly al salir

üì± CONTROL POR VOZ:
‚Ä¢ "Alexa, modo familia" - Configura ambiente familiar
‚Ä¢ "Ok Google, buenas noches" - Rutina nocturna
‚Ä¢ "Siri, estoy en casa" - Bienvenida personalizada
‚Ä¢ "Maestro, ayuda con tareas" - Asistente educativo

üîê SEGURIDAD INTELIGENTE:
‚Ä¢ Reconocimiento facial familiar
‚Ä¢ Alertas de movimiento inusual
‚Ä¢ Grabaci√≥n autom√°tica de visitantes
‚Ä¢ Notificaciones m√≥viles en tiempo real
‚Ä¢ Integraci√≥n con polic√≠a local

üí° EFICIENCIA ENERG√âTICA:
‚Ä¢ Apagado autom√°tico de dispositivos
‚Ä¢ Optimizaci√≥n de uso el√©ctrico
‚Ä¢ Reporte mensual de consumo
‚Ä¢ Sugerencias de ahorro energ√©tico
‚Ä¢ Integraci√≥n con paneles solares
        """
        
        automation_display = scrolledtext.ScrolledText(automation_list_frame, height=18, width=100, 
                                                      bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        automation_display.pack(pady=10, padx=10, fill='both', expand=True)
        automation_display.insert('1.0', automation_info)
        
    def create_family_finance_tab(self):
        """Tab de finanzas familiares"""
        finance_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(finance_frame, text='üí∞ Finanzas')
        
        # Resumen financiero
        summary_frame = tk.LabelFrame(finance_frame, text="üìä Resumen Financiero Familiar", 
                                     bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        summary_frame.pack(fill='x', padx=20, pady=10)
        
        finance_grid = tk.Frame(summary_frame, bg='#0f1419')
        finance_grid.pack(pady=15, padx=15)
        
        # M√©tricas financieras
        finance_metrics = [
            ("üíµ Ingresos", "‚Ç°850,000", "Este mes", '#00d4aa'),
            ("üí∏ Gastos", "‚Ç°650,000", "Este mes", '#ff6b6b'),
            ("üí∞ Ahorros", "‚Ç°200,000", "Disponible", '#ffd700'),
            ("üìà Inversiones", "‚Ç°150,000", "Creciendo", '#4a9eff')
        ]
        
        for i, (category, amount, period, color) in enumerate(finance_metrics):
            metric_card = tk.Frame(finance_grid, bg='#1e2328', relief='raised', bd=2)
            metric_card.grid(row=0, column=i, padx=10, pady=5, sticky='nsew')
            
            tk.Label(metric_card, text=category, font=('Arial', 11, 'bold'), 
                    fg=color, bg='#1e2328').pack(pady=5)
            
            tk.Label(metric_card, text=amount, font=('Arial', 16, 'bold'), 
                    fg=color, bg='#1e2328').pack(pady=2)
            
            tk.Label(metric_card, text=period, font=('Arial', 9), 
                    fg='#888888', bg='#1e2328').pack(pady=2)
            
        # Configurar grid
        for i in range(4):
            finance_grid.columnconfigure(i, weight=1)
            
        # Gesti√≥n financiera inteligente
        management_frame = tk.LabelFrame(finance_frame, text="ü§ñ Gesti√≥n Financiera Inteligente", 
                                        bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        management_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        finance_info = """
ü§ñ ASISTENTE FINANCIERO FAMILIAR IA

üìä AN√ÅLISIS AUTOM√ÅTICO:
‚Ä¢ Categorizaci√≥n inteligente de gastos
‚Ä¢ Detecci√≥n de patrones de consumo
‚Ä¢ Predicci√≥n de gastos futuros
‚Ä¢ Alertas de gastos inusuales
‚Ä¢ Comparaci√≥n con familias similares

üí° RECOMENDACIONES PERSONALIZADAS:
‚Ä¢ Oportunidades de ahorro identificadas
‚Ä¢ Mejores momentos para compras grandes
‚Ä¢ Comparaci√≥n autom√°tica de precios
‚Ä¢ Sugerencias de inversi√≥n familiar
‚Ä¢ Planificaci√≥n de vacaciones familiares

üè¶ INTEGRACI√ìN BANCARIA:
‚Ä¢ Conexi√≥n con bancos costarricenses
‚Ä¢ Sincronizaci√≥n autom√°tica de cuentas
‚Ä¢ Alertas de movimientos bancarios
‚Ä¢ Recordatorios de pagos importantes
‚Ä¢ Gesti√≥n de presupuesto familiar

üìà METAS FAMILIARES:
‚Ä¢ Casa propia: ‚Ç°15,000,000 (Meta en 5 a√±os)
‚Ä¢ Educaci√≥n hijos: ‚Ç°5,000,000 (Universidad)
‚Ä¢ Vacaciones anuales: ‚Ç°800,000
‚Ä¢ Fondo de emergencia: ‚Ç°2,000,000
‚Ä¢ Inversiones futuro: ‚Ç°1,000,000

üí≥ CONTROL DE GASTOS:
‚Ä¢ L√≠mites autom√°ticos por categor√≠a
‚Ä¢ Notificaciones de presupuesto
‚Ä¢ An√°lisis de gastos por miembro
‚Ä¢ Sugerencias de optimizaci√≥n
‚Ä¢ Reportes mensuales familiares

üîî ALERTAS INTELIGENTES:
‚Ä¢ "Pap√° gast√≥ m√°s en gasolina este mes"
‚Ä¢ "Oportunidad: Descuento en supermercado favorito"
‚Ä¢ "Meta de ahorros alcanzada al 80%"
‚Ä¢ "Recordatorio: Pago de seguros en 3 d√≠as"
‚Ä¢ "Sugerencia: Cambiar plan de telefon√≠a puede ahorrar ‚Ç°15,000/mes"

üá®üá∑ ESPEC√çFICO PARA COSTA RICA:
‚Ä¢ Integraci√≥n con SINPE M√≥vil
‚Ä¢ C√°lculo autom√°tico de impuestos
‚Ä¢ Seguimiento de servicios p√∫blicos (ICE, AyA)
‚Ä¢ Descuentos en comercios locales
‚Ä¢ Planificaci√≥n para aguinaldo
        """
        
        finance_display = scrolledtext.ScrolledText(management_frame, height=20, width=100, 
                                                   bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        finance_display.pack(pady=10, padx=10, fill='both', expand=True)
        finance_display.insert('1.0', finance_info)
        
    def create_health_wellness_tab(self):
        """Tab de salud y bienestar familiar"""
        health_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(health_frame, text='üè• Salud')
        
        # Estado de salud familiar
        health_status_frame = tk.LabelFrame(health_frame, text="üíì Estado de Salud Familiar", 
                                           bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        health_status_frame.pack(fill='x', padx=20, pady=10)
        
        health_grid = tk.Frame(health_status_frame, bg='#0f1419')
        health_grid.pack(pady=15, padx=15)
        
        # M√©tricas de salud por miembro
        family_health = [
            ("üë® Pap√°", "Excelente", "Ejercicio: 5/7 d√≠as", '#00d4aa'),
            ("üë© Mam√°", "Muy bien", "Yoga: 4/7 d√≠as", '#00d4aa'),
            ("üëß Ana", "Perfecto", "Deportes: 6/7 d√≠as", '#00d4aa'),
            ("üë¶ Carlos", "Excelente", "Actividad: 7/7 d√≠as", '#00d4aa')
        ]
        
        for i, (member, status, activity, color) in enumerate(family_health):
            health_card = tk.Frame(health_grid, bg='#1e2328', relief='raised', bd=2)
            health_card.grid(row=0, column=i, padx=8, pady=5, sticky='nsew')
            
            tk.Label(health_card, text=member, font=('Arial', 12, 'bold'), 
                    fg='#ffd700', bg='#1e2328').pack(pady=5)
            
            tk.Label(health_card, text=status, font=('Arial', 11, 'bold'), 
                    fg=color, bg='#1e2328').pack(pady=2)
            
            tk.Label(health_card, text=activity, font=('Arial', 9), 
                    fg='#cccccc', bg='#1e2328').pack(pady=2)
            
            tk.Button(health_card, text="üìä Detalles", 
                     command=lambda m=member: self.show_health_details(m),
                     bg='#4a9eff', fg='white', font=('Arial', 8, 'bold')).pack(pady=5)
            
        # Configurar grid
        for i in range(4):
            health_grid.columnconfigure(i, weight=1)
            
        # Sistema de salud inteligente
        health_system_frame = tk.LabelFrame(health_frame, text="ü§ñ Sistema de Salud Inteligente", 
                                           bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        health_system_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        health_info = """
üè• ASISTENTE DE SALUD FAMILIAR IA

üì± MONITOREO CONTINUO:
‚Ä¢ Integraci√≥n con dispositivos wearables
‚Ä¢ Seguimiento de signos vitales
‚Ä¢ An√°lisis de patrones de sue√±o
‚Ä¢ Monitoreo de actividad f√≠sica
‚Ä¢ Detecci√≥n temprana de anomal√≠as

üíä GESTI√ìN DE MEDICAMENTOS:
‚Ä¢ Recordatorios autom√°ticos de medicinas
‚Ä¢ Verificaci√≥n de interacciones medicamentosas
‚Ä¢ Seguimiento de tratamientos m√©dicos
‚Ä¢ Conexi√≥n con farmacias locales
‚Ä¢ Alertas de reabastecimiento

üè• INTEGRACI√ìN M√âDICA CR:
‚Ä¢ Conexi√≥n con CCSS (Caja Costarricense)
‚Ä¢ Agenda de citas m√©dicas autom√°tica
‚Ä¢ Historial m√©dico familiar digital
‚Ä¢ Vacunaci√≥n y controles preventivos
‚Ä¢ Telemedicina integrada

üçé NUTRICI√ìN INTELIGENTE:
‚Ä¢ Planificaci√≥n de men√∫s familiares
‚Ä¢ An√°lisis nutricional autom√°tico
‚Ä¢ Sugerencias de comidas saludables
‚Ä¢ Lista de compras inteligente
‚Ä¢ Recetas costarricenses saludables

üèÉ‚Äç‚ôÇÔ∏è ACTIVIDAD F√çSICA FAMILIAR:
‚Ä¢ Rutinas personalizadas por edad
‚Ä¢ Seguimiento de objetivos fitness
‚Ä¢ Competencias familiares divertidas
‚Ä¢ Integraci√≥n con parques locales CR
‚Ä¢ Actividades al aire libre sugeridas

üß† BIENESTAR MENTAL:
‚Ä¢ Seguimiento del estado de √°nimo
‚Ä¢ T√©cnicas de relajaci√≥n familiares
‚Ä¢ Meditaci√≥n guiada personalizada
‚Ä¢ Actividades anti-estr√©s
‚Ä¢ Detecci√≥n temprana de problemas

üìä REPORTES DE SALUD:
‚Ä¢ Resumen semanal familiar
‚Ä¢ Tendencias de mejora/deterioro
‚Ä¢ Comparaci√≥n con est√°ndares CR
‚Ä¢ Recomendaciones preventivas
‚Ä¢ Alertas m√©dicas importantes

üö® EMERGENCIAS M√âDICAS:
‚Ä¢ Detecci√≥n autom√°tica de emergencias
‚Ä¢ Contacto directo con servicios m√©dicos
‚Ä¢ Localizaci√≥n GPS para ambulancias
‚Ä¢ Informaci√≥n m√©dica cr√≠tica familiar
‚Ä¢ Protocolos de primeros auxilios IA

üá®üá∑ ESPEC√çFICO COSTA RICA:
‚Ä¢ Integraci√≥n con hospitales nacionales
‚Ä¢ Conocimiento de enfermedades tropicales
‚Ä¢ Alertas epidemiol√≥gicas nacionales
‚Ä¢ Conexi√≥n con Ministerio de Salud
‚Ä¢ Promoci√≥n de medicina preventiva
        """
        
        health_display = scrolledtext.ScrolledText(health_system_frame, height=22, width=100, 
                                                  bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        health_display.pack(pady=10, padx=10, fill='both', expand=True)
        health_display.insert('1.0', health_info)
        
    def create_local_services_tab(self):
        """Tab de servicios locales"""
        services_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(services_frame, text='üá®üá∑ Servicios CR')
        
        # Servicios disponibles
        available_services_frame = tk.LabelFrame(services_frame, text="üè™ Servicios Locales Disponibles", 
                                                bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        available_services_frame.pack(fill='x', padx=20, pady=10)
        
        services_grid = tk.Frame(available_services_frame, bg='#0f1419')
        services_grid.pack(pady=15, padx=15)
        
        # Servicios costarricenses
        local_services = [
            ("üõí Supermercados", "AutoMercado, MasXMenos", "Delivery disponible", '#00d4aa'),
            ("üçï Restaurantes", "Comida t√≠pica y internacional", "Pedidos online", '#ff6b6b'),
            ("üöó Transporte", "Uber, taxi, bus", "Rutas optimizadas", '#4a9eff'),
            ("üè• Salud", "Cl√≠nicas, farmacias", "Telemedicina", '#ffd700'),
            ("üíº Servicios", "Plomer√≠a, electricidad", "Profesionales verificados", '#9b59b6'),
            ("üéì Educaci√≥n", "Tutor√≠as, cursos", "Modalidad virtual/presencial", '#ff9f43')
        ]
        
        row, col = 0, 0
        for service, providers, feature, color in local_services:
            service_card = tk.Frame(services_grid, bg='#1e2328', relief='raised', bd=2)
            service_card.grid(row=row, column=col, padx=8, pady=8, sticky='nsew')
            
            tk.Label(service_card, text=service, font=('Arial', 11, 'bold'), 
                    fg=color, bg='#1e2328').pack(pady=5)
            
            tk.Label(service_card, text=providers, font=('Arial', 9), 
                    fg='#cccccc', bg='#1e2328', wraplength=150, justify=tk.CENTER).pack(pady=2)
            
            tk.Label(service_card, text=feature, font=('Arial', 8), 
                    fg='#888888', bg='#1e2328').pack(pady=2)
            
            tk.Button(service_card, text="üîç Explorar", 
                     command=lambda s=service: self.explore_service(s),
                     bg=color, fg='white' if color not in ['#ffd700'] else 'black', 
                     font=('Arial', 8, 'bold')).pack(pady=5)
            
            col += 1
            if col > 2:
                col = 0
                row += 1
                
        # Configurar grid
        for i in range(3):
            services_grid.columnconfigure(i, weight=1)
            
        # Integraci√≥n con Costa Rica
        cr_integration_frame = tk.LabelFrame(services_frame, text="üá®üá∑ Integraci√≥n Nacional", 
                                            bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        cr_integration_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        cr_info = """
üá®üá∑ NEXUSOPTIM IA - INTEGRADO CON COSTA RICA

üèõÔ∏è SERVICIOS GUBERNAMENTALES:
‚Ä¢ AyA - Monitoreo de agua potable
‚Ä¢ ICE - Gesti√≥n de electricidad y telecomunicaciones
‚Ä¢ CCSS - Servicios de salud integrados
‚Ä¢ Ministerio de Educaci√≥n - Curr√≠culo oficial
‚Ä¢ MOPT - Informaci√≥n de tr√°nsito en tiempo real
‚Ä¢ Registro Nacional - Tr√°mites digitales

üè™ COMERCIO LOCAL:
‚Ä¢ SINPE M√≥vil - Pagos instant√°neos
‚Ä¢ Facturas electr√≥nicas autom√°ticas
‚Ä¢ Comparaci√≥n de precios en tiempo real
‚Ä¢ Promociones y descuentos locales
‚Ä¢ Soporte a PYMES costarricenses

üåø TURISMO Y CULTURA:
‚Ä¢ Parques Nacionales - Reservas online
‚Ä¢ Eventos culturales locales
‚Ä¢ Festivales y celebraciones
‚Ä¢ Tours virtuales de Costa Rica
‚Ä¢ Promoci√≥n del turismo interno

üì± TECNOLOG√çA NACIONAL:
‚Ä¢ Integraci√≥n con startups locales
‚Ä¢ Soporte a desarrolladores ticos
‚Ä¢ Promoci√≥n de talento nacional
‚Ä¢ Colaboraci√≥n con universidades CR
‚Ä¢ Impulso a la econom√≠a digital

üåç IMPACTO SOCIAL:
‚Ä¢ Programa de inclusi√≥n digital
‚Ä¢ Acceso gratuito para familias de escasos recursos
‚Ä¢ Capacitaci√≥n tecnol√≥gica comunitaria
‚Ä¢ Apoyo a adultos mayores
‚Ä¢ Reducci√≥n de brecha digital

üìä DATOS Y PRIVACIDAD:
‚Ä¢ Datos almacenados en territorio nacional
‚Ä¢ Cumplimiento con leyes costarricenses
‚Ä¢ Transparencia total en uso de informaci√≥n
‚Ä¢ Control familiar de privacidad
‚Ä¢ Seguridad certificada nacionalmente

üéØ MISI√ìN NACIONAL:
"Democratizar el acceso a la inteligencia artificial en todos los hogares 
costarricenses, fortaleciendo la educaci√≥n, mejorando la calidad de vida 
familiar y promoviendo el desarrollo tecnol√≥gico nacional."

üí° VISI√ìN 2030:
"Costa Rica como l√≠der centroamericano en adopci√≥n de IA dom√©stica,
con NexusOptim IA presente en el 90% de los hogares nacionales,
contribuyendo al desarrollo humano y la competitividad del pa√≠s."

üèÜ COMPROMISO SOCIAL:
‚Ä¢ 100% de escuelas p√∫blicas con acceso gratuito
‚Ä¢ Programa especial para comunidades rurales
‚Ä¢ Soporte t√©cnico en espa√±ol costarricense
‚Ä¢ Respaldo de garant√≠a nacional
‚Ä¢ Contribuci√≥n al PIB tecnol√≥gico nacional
        """
        
        cr_display = scrolledtext.ScrolledText(cr_integration_frame, height=25, width=100, 
                                              bg='#1e2328', fg='#cccccc', font=('Arial', 10))
        cr_display.pack(pady=10, padx=10, fill='both', expand=True)
        cr_display.insert('1.0', cr_info)
        
    def create_damage_reports_tab(self):
        """Tab de reportes de aver√≠as de infraestructura"""
        reports_frame = tk.Frame(self.notebook, bg='#0f1419')
        self.notebook.add(reports_frame, text='üö® Reportes Aver√≠as')
        
        # Header de emergencia
        emergency_header = tk.Frame(reports_frame, bg='#ff4444', height=60)
        emergency_header.pack(fill='x', pady=0)
        emergency_header.pack_propagate(False)
        
        emergency_label = tk.Label(emergency_header, 
                                  text="üö® SISTEMA DE REPORTES DE AVER√çAS - INFRAESTRUCTURA NACIONAL üá®üá∑", 
                                  font=('Arial', 14, 'bold'), fg='white', bg='#ff4444')
        emergency_label.pack(expand=True)
        
        # Botones de reporte r√°pido
        quick_buttons_frame = tk.LabelFrame(reports_frame, text="‚ö° Reportes R√°pidos de Emergencia", 
                                           bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        quick_buttons_frame.pack(fill='x', padx=20, pady=10)
        
        buttons_grid = tk.Frame(quick_buttons_frame, bg='#0f1419')
        buttons_grid.pack(pady=15, padx=15)
        
        # Tipos de aver√≠as cr√≠ticas
        emergency_types = [
            ("‚ö°", "Transformador Averiado", "Transformador el√©ctrico da√±ado o en llamas", '#ff4444'),
            ("üîå", "Cableado Peligroso", "Cables ca√≠dos o expuestos peligrosos", '#ff6b00'),
            ("üíß", "Fuga de Agua", "Tuber√≠a rota o fuga masiva de agua", '#4a9eff'),
            ("üöó", "Choque vs Poste", "Accidente vehicular contra infraestructura", '#ff0066'),
            ("üî•", "Incendio El√©ctrico", "Fuego en instalaciones el√©ctricas", '#cc0000'),
            ("üì°", "Torre Comunicaciones", "Da√±o en antenas o torres telecomunicaciones", '#9b59b6')
        ]
        
        row, col = 0, 0
        for icon, title, desc, color in emergency_types:
            emergency_btn = tk.Button(buttons_grid, 
                                    text=f"{icon}\n{title}", 
                                    command=lambda t=title, d=desc: self.quick_damage_report(t, d),
                                    bg=color, fg='white', 
                                    font=('Arial', 10, 'bold'),
                                    width=18, height=4)
            emergency_btn.grid(row=row, column=col, padx=8, pady=8, sticky='nsew')
            
            col += 1
            if col > 2:
                col = 0
                row += 1
                
        # Configurar grid
        for i in range(3):
            buttons_grid.columnconfigure(i, weight=1)
            
        # Formulario detallado de reporte
        detailed_form_frame = tk.LabelFrame(reports_frame, text="üìã Reporte Detallado de Aver√≠a", 
                                           bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        detailed_form_frame.pack(fill='both', expand=True, padx=20, pady=10)
        
        form_container = tk.Frame(detailed_form_frame, bg='#0f1419')
        form_container.pack(fill='both', expand=True, padx=15, pady=15)
        
        # Lado izquierdo - Formulario
        left_form = tk.Frame(form_container, bg='#0f1419')
        left_form.pack(side='left', fill='both', expand=True, padx=(0, 10))
        
        # Tipo de aver√≠a
        tk.Label(left_form, text="üîß Tipo de Aver√≠a:", bg='#0f1419', fg='white', 
                font=('Arial', 11, 'bold')).pack(anchor='w', pady=(5, 2))
        
        self.damage_type_var = tk.StringVar(value='Transformador')
        damage_types = ['Transformador', 'Cableado El√©ctrico', 'Tuber√≠a de Agua', 
                       'Poste de Electricidad', 'Sem√°foro', 'Torre de Comunicaciones',
                       'Alcantarillado', 'Alumbrado P√∫blico', 'Otro']
        
        damage_type_combo = ttk.Combobox(left_form, textvariable=self.damage_type_var, 
                                        values=damage_types, width=40)
        damage_type_combo.pack(pady=(0, 10), fill='x')
        
        # Ubicaci√≥n
        tk.Label(left_form, text="üìç Ubicaci√≥n Exacta:", bg='#0f1419', fg='white', 
                font=('Arial', 11, 'bold')).pack(anchor='w', pady=(5, 2))
        
        self.location_entry = tk.Entry(left_form, font=('Arial', 10), width=50)
        self.location_entry.pack(pady=(0, 10), fill='x')
        self.location_entry.insert(0, "Ej: 200m sur de la iglesia de San Pedro, Montes de Oca")
        
        # Descripci√≥n detallada
        tk.Label(left_form, text="üìù Descripci√≥n Detallada:", bg='#0f1419', fg='white', 
                font=('Arial', 11, 'bold')).pack(anchor='w', pady=(5, 2))
        
        self.description_text = scrolledtext.ScrolledText(left_form, height=8, width=50, 
                                                         bg='#1e2328', fg='#cccccc', 
                                                         font=('Arial', 10))
        self.description_text.pack(pady=(0, 10), fill='both', expand=True)
        self.description_text.insert('1.0', "Describa detalladamente el problema observado...")
        
        # Lado derecho - Informaci√≥n del reportante
        right_form = tk.Frame(form_container, bg='#0f1419')
        right_form.pack(side='right', fill='y', padx=(10, 0))
        
        # Informaci√≥n del reportante
        reporter_frame = tk.LabelFrame(right_form, text="üë§ Informaci√≥n del Reportante", 
                                      bg='#0f1419', fg='#00d4aa', font=('Arial', 11, 'bold'))
        reporter_frame.pack(fill='x', pady=(0, 15))
        
        tk.Label(reporter_frame, text="Nombre:", bg='#0f1419', fg='white', 
                font=('Arial', 10)).pack(anchor='w', pady=(10, 2), padx=10)
        
        self.reporter_name_entry = tk.Entry(reporter_frame, font=('Arial', 10), width=25)
        self.reporter_name_entry.pack(pady=(0, 5), padx=10, fill='x')
        
        tk.Label(reporter_frame, text="Tel√©fono:", bg='#0f1419', fg='white', 
                font=('Arial', 10)).pack(anchor='w', pady=(5, 2), padx=10)
        
        self.reporter_phone_entry = tk.Entry(reporter_frame, font=('Arial', 10), width=25)
        self.reporter_phone_entry.pack(pady=(0, 10), padx=10, fill='x')
        
        # Prioridad
        priority_frame = tk.LabelFrame(right_form, text="üö® Nivel de Urgencia", 
                                      bg='#0f1419', fg='#ff6b6b', font=('Arial', 11, 'bold'))
        priority_frame.pack(fill='x', pady=(0, 15))
        
        self.priority_var = tk.StringVar(value='Media')
        priorities = [
            ('üî¥ CR√çTICA - Peligro inmediato', 'Cr√≠tica'),
            ('üü° ALTA - Requiere atenci√≥n pronto', 'Alta'), 
            ('üü¢ MEDIA - No es urgente', 'Media')
        ]
        
        for text, value in priorities:
            tk.Radiobutton(priority_frame, text=text, variable=self.priority_var, 
                          value=value, bg='#0f1419', fg='white', 
                          selectcolor='#1e2328', font=('Arial', 9)).pack(anchor='w', pady=2, padx=10)
        
        # Botones de acci√≥n
        action_buttons = tk.Frame(right_form, bg='#0f1419')
        action_buttons.pack(fill='x', pady=(15, 0))
        
        tk.Button(action_buttons, text="üì§ ENVIAR REPORTE", 
                 command=self.submit_damage_report,
                 bg='#00d4aa', fg='black', font=('Arial', 11, 'bold')).pack(fill='x', pady=5)
        
        tk.Button(action_buttons, text="üìã Ver Mis Reportes", 
                 command=self.view_my_reports,
                 bg='#4a9eff', fg='white', font=('Arial', 10, 'bold')).pack(fill='x', pady=2)
        
        tk.Button(action_buttons, text="üóÇÔ∏è Limpiar Formulario", 
                 command=self.clear_form,
                 bg='#666666', fg='white', font=('Arial', 10)).pack(fill='x', pady=2)
        
        # Status de reportes recientes
        status_frame = tk.LabelFrame(reports_frame, text="üìä Estado de Reportes Recientes", 
                                    bg='#0f1419', fg='white', font=('Arial', 12, 'bold'))
        status_frame.pack(fill='x', padx=20, pady=(0, 20))
        
        self.reports_status_text = scrolledtext.ScrolledText(status_frame, height=6, width=100, 
                                                            bg='#1e2328', fg='#cccccc', 
                                                            font=('Arial', 9))
        self.reports_status_text.pack(pady=10, padx=10, fill='x')
        
        # Cargar reportes existentes
        self.load_recent_reports()
        
    def update_education_content(self, event=None):
        """Actualizar contenido educativo seg√∫n miembro seleccionado"""
        member_name = self.education_member_var.get()
        
        # Buscar miembro
        member = next((m for m in self.family_config['family_members'] if m['name'] == member_name), None)
        if not member:
            return
            
        # Contenido personalizado por edad
        if member['age'] <= 12:  # Ni√±os
            content = f"""
üéì CONTENIDO EDUCATIVO PERSONALIZADO - {member['name']} ({member['age']} a√±os)

üìö MATERIAS PRINCIPALES:
‚Ä¢ Matem√°ticas: Operaciones b√°sicas, geometr√≠a divertida
‚Ä¢ Espa√±ol: Lectura comprensiva, escritura creativa
‚Ä¢ Ciencias: Experimentos seguros, naturaleza de CR
‚Ä¢ Estudios Sociales: Historia costarricense, geograf√≠a
‚Ä¢ Ingl√©s: Vocabulario b√°sico, canciones educativas
‚Ä¢ Arte: Dibujo digital, manualidades recicladas

üéÆ JUEGOS EDUCATIVOS:
‚Ä¢ Aventuras Matem√°ticas en Costa Rica
‚Ä¢ Explorador de la Biodiversidad Tica
‚Ä¢ Constructor de Oraciones Divertidas
‚Ä¢ Geograf√≠a Interactiva CR
‚Ä¢ Ciencia Experimental Virtual

üìñ LECTURAS RECOMENDADAS:
‚Ä¢ Cuentos de la tradici√≥n costarricense
‚Ä¢ Historias de animales del bosque tropical
‚Ä¢ Aventuras de ni√±os exploradores
‚Ä¢ F√°bulas con valores familiares

üéØ OBJETIVOS DE APRENDIZAJE:
‚Ä¢ Desarrollar amor por el aprendizaje
‚Ä¢ Fortalecer habilidades b√°sicas
‚Ä¢ Promover curiosidad cient√≠fica
‚Ä¢ Valorar la cultura costarricense
            """
        elif member['age'] <= 18:  # Adolescentes
            content = f"""
üéì CONTENIDO EDUCATIVO PERSONALIZADO - {member['name']} ({member['age']} a√±os)

üìö MATERIAS SECUNDARIA:
‚Ä¢ Matem√°ticas: √Ålgebra, geometr√≠a, estad√≠stica
‚Ä¢ Espa√±ol: Literatura, an√°lisis de textos, redacci√≥n
‚Ä¢ Ciencias: Biolog√≠a, qu√≠mica, f√≠sica aplicada
‚Ä¢ Estudios Sociales: Historia mundial, econom√≠a
‚Ä¢ Ingl√©s: Conversaci√≥n avanzada, preparaci√≥n TOEFL
‚Ä¢ Tecnolog√≠a: Programaci√≥n, rob√≥tica, IA b√°sica

üíº PREPARACI√ìN UNIVERSITARIA:
‚Ä¢ Orientaci√≥n vocacional personalizada
‚Ä¢ Preparaci√≥n para ex√°menes de admisi√≥n
‚Ä¢ Desarrollo de habilidades de estudio
‚Ä¢ Proyectos de investigaci√≥n cient√≠fica

üåü HABILIDADES DEL SIGLO XXI:
‚Ä¢ Pensamiento cr√≠tico y creatividad
‚Ä¢ Colaboraci√≥n y comunicaci√≥n
‚Ä¢ Competencia digital avanzada
‚Ä¢ Liderazgo y emprendimiento

üéØ METAS EDUCATIVAS:
‚Ä¢ Excelencia acad√©mica
‚Ä¢ Preparaci√≥n universitaria
‚Ä¢ Desarrollo personal integral
‚Ä¢ Conciencia social y ambiental
            """
        else:  # Adultos
            content = f"""
üéì EDUCACI√ìN CONTINUA - {member['name']} ({member['age']} a√±os)

üìà DESARROLLO PROFESIONAL:
‚Ä¢ Cursos de actualizaci√≥n laboral
‚Ä¢ Certificaciones tecnol√≥gicas
‚Ä¢ Habilidades de liderazgo
‚Ä¢ Emprendimiento e innovaci√≥n

üß† APRENDIZAJE PERSONAL:
‚Ä¢ Nuevos idiomas (franc√©s, mandar√≠n)
‚Ä¢ Habilidades digitales avanzadas
‚Ä¢ Cultura general y arte
‚Ä¢ Salud y bienestar personal

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ EDUCACI√ìN FAMILIAR:
‚Ä¢ T√©cnicas de crianza positiva
‚Ä¢ Comunicaci√≥n familiar efectiva
‚Ä¢ Gesti√≥n financiera del hogar
‚Ä¢ Tecnolog√≠a para la familia

üå± CRECIMIENTO PERSONAL:
‚Ä¢ Inteligencia emocional
‚Ä¢ Mindfulness y meditaci√≥n
‚Ä¢ Creatividad y expresi√≥n art√≠stica
‚Ä¢ Prop√≥sito de vida y valores
            """
            
        self.education_content.delete('1.0', tk.END)
        self.education_content.insert('1.0', content)
        
    def create_family_lesson(self):
        """Crear lecci√≥n personalizada para la familia"""
        member = self.education_member_var.get()
        
        messagebox.showinfo("üéì Lecci√≥n Personalizada", 
                           f"‚ú® Creando lecci√≥n personalizada para {member}\n\n"
                           f"ü§ñ La IA est√° analizando:\n"
                           f"‚Ä¢ Perfil de aprendizaje individual\n"
                           f"‚Ä¢ Intereses y pasatiempos\n"
                           f"‚Ä¢ Nivel educativo actual\n"
                           f"‚Ä¢ Objetivos familiares\n\n"
                           f"üìö Lecci√≥n lista en 30 segundos...")
        
        # Log actividad
        self.log_family_activity(member, 'education', f'Lecci√≥n personalizada creada')
        
    def show_education_progress(self):
        """Mostrar progreso educativo"""
        member = self.education_member_var.get()
        
        progress_window = tk.Toplevel(self.root)
        progress_window.title(f"üìä Progreso Educativo - {member}")
        progress_window.geometry("600x500")
        progress_window.configure(bg='#1e2328')
        
        progress_info = f"""
üìä REPORTE DE PROGRESO EDUCATIVO

üë§ Estudiante: {member}
üìÖ Per√≠odo: Noviembre 2024

üìà RENDIMIENTO GENERAL: 92%

üìö MATERIAS:
‚Ä¢ Matem√°ticas: 95% - Excelente
‚Ä¢ Espa√±ol: 88% - Muy bien  
‚Ä¢ Ciencias: 94% - Excelente
‚Ä¢ Ingl√©s: 90% - Muy bien
‚Ä¢ Estudios Sociales: 87% - Bien

‚≠ê FORTALEZAS IDENTIFICADAS:
‚Ä¢ Resoluci√≥n de problemas matem√°ticos
‚Ä¢ Creatividad en escritura
‚Ä¢ Curiosidad cient√≠fica
‚Ä¢ Participaci√≥n activa

üéØ √ÅREAS DE MEJORA:
‚Ä¢ Concentraci√≥n en lecturas largas
‚Ä¢ Organizaci√≥n de tiempo de estudio
‚Ä¢ Participaci√≥n en actividades grupales

üèÜ LOGROS RECIENTES:
‚Ä¢ Proyecto de ciencias destacado
‚Ä¢ Mejora significativa en ingl√©s
‚Ä¢ Liderazgo en actividades familiares

üìã RECOMENDACIONES IA:
‚Ä¢ Aumentar tiempo de lectura recreativa
‚Ä¢ Implementar t√©cnicas de estudio visual
‚Ä¢ Incluir m√°s actividades colaborativas
‚Ä¢ Continuar con enfoque pr√°ctico en ciencias
        """
        
        progress_label = tk.Label(progress_window, text=progress_info, 
                                 bg='#1e2328', fg='#cccccc', font=('Arial', 11), 
                                 justify=tk.LEFT)
        progress_label.pack(pady=20, padx=20, fill='both', expand=True)
        
    def launch_educational_games(self):
        """Lanzar juegos educativos"""
        games_window = tk.Toplevel(self.root)
        games_window.title("üéÆ Juegos Educativos Familiares")
        games_window.geometry("800x600")
        games_window.configure(bg='#1e2328')
        
        games_info = """
üéÆ BIBLIOTECA DE JUEGOS EDUCATIVOS

üë®‚Äçüë©‚Äçüëß‚Äçüë¶ JUEGOS FAMILIARES:
‚Ä¢ Quiz Costa Rica - Conocimiento nacional
‚Ä¢ Matem√°ticas en Equipo - Colaborativo
‚Ä¢ Geograf√≠a Mundial - Exploraci√≥n virtual
‚Ä¢ Historia en Tiempo Real - Simulaci√≥n

üë¶ PARA CARLOS (12 a√±os):
‚Ä¢ Laboratorio Virtual - Experimentos seguros
‚Ä¢ Constructor de Robots - Programaci√≥n b√°sica  
‚Ä¢ Aventura Matem√°tica - RPG educativo
‚Ä¢ Explorador Natural CR - Biodiversidad

üëß PARA ANA (16 a√±os):
‚Ä¢ Simulador Econ√≥mico - Microeconom√≠a
‚Ä¢ Laboratorio de Qu√≠mica Virtual
‚Ä¢ Debate Digital - Habilidades argumentativas
‚Ä¢ Programadora Junior - Coding challenges

üë®üë© PARA PAP√ÅS:
‚Ä¢ Finanzas Familiares - Simulaci√≥n
‚Ä¢ Idiomas Express - Aprendizaje r√°pido
‚Ä¢ Cultura General - Trivia avanzada
‚Ä¢ Manejo del Tiempo - Productividad

üèÜ COMPETENCIAS FAMILIARES:
‚Ä¢ Torneo semanal de conocimientos
‚Ä¢ Desaf√≠os colaborativos mensuales
‚Ä¢ Ranking familiar de logros
‚Ä¢ Premios y reconocimientos virtuales
        """
        
        games_label = tk.Label(games_window, text=games_info, 
                              bg='#1e2328', fg='#cccccc', font=('Arial', 11), 
                              justify=tk.LEFT)
        games_label.pack(pady=20, padx=20, fill='both', expand=True)
        
    def show_entertainment_category(self, category):
        """Mostrar categor√≠a de entretenimiento"""
        messagebox.showinfo(f"üé¨ {category}", 
                           f"üéØ Abriendo recomendaciones de {category}\n\n"
                           f"ü§ñ Personalizadas para toda la familia\n"
                           f"üìä Basadas en preferencias y edades\n"
                           f"üá®üá∑ Contenido costarricense incluido")
        
    def control_device(self, device):
        """Controlar dispositivo del hogar"""
        messagebox.showinfo(f"‚öôÔ∏è Control {device}", 
                           f"üè† Panel de control para {device}\n\n"
                           f"‚úÖ Dispositivo conectado\n"
                           f"üîß Configuraciones disponibles\n"
                           f"üì± Control desde cualquier dispositivo\n"
                           f"ü§ñ Automatizaci√≥n inteligente activa")
        
    def show_health_details(self, member):
        """Mostrar detalles de salud"""
        health_window = tk.Toplevel(self.root)
        health_window.title(f"üíì Salud - {member}")
        health_window.geometry("500x400")
        health_window.configure(bg='#1e2328')
        
        health_details = f"""
üíì REPORTE DE SALUD DETALLADO

üë§ {member}
üìÖ √öltima actualizaci√≥n: Hoy

üìä M√âTRICAS VITALES:
‚Ä¢ Ritmo card√≠aco: 72 bpm (Normal)
‚Ä¢ Presi√≥n arterial: 120/80 (√ìptima)
‚Ä¢ Peso: Estable
‚Ä¢ Actividad f√≠sica: Excelente

üèÉ‚Äç‚ôÇÔ∏è ACTIVIDAD SEMANAL:
‚Ä¢ Pasos diarios: 8,500 promedio
‚Ä¢ Ejercicio: 45 min/d√≠a
‚Ä¢ Descanso: 7.5 horas/noche
‚Ä¢ Hidrataci√≥n: Adecuada

üíä RECORDATORIOS:
‚Ä¢ Examen m√©dico anual: En 2 meses
‚Ä¢ Vacunas al d√≠a: ‚úÖ
‚Ä¢ Control dental: Programado

üéØ RECOMENDACIONES:
‚Ä¢ Continuar rutina actual
‚Ä¢ Aumentar consumo de vegetales
‚Ä¢ Mantener horario de sue√±o
‚Ä¢ Revisi√≥n preventiva pr√≥xima
        """
        
        health_label = tk.Label(health_window, text=health_details, 
                               bg='#1e2328', fg='#cccccc', font=('Arial', 11), 
                               justify=tk.LEFT)
        health_label.pack(pady=20, padx=20, fill='both', expand=True)
        
    def explore_service(self, service):
        """Explorar servicio local"""
        messagebox.showinfo(f"üîç {service}", 
                           f"üá®üá∑ Explorando {service} en tu √°rea\n\n"
                           f"üìç Servicios cerca de {self.family_config['location']}\n"
                           f"‚≠ê Calificaciones y rese√±as\n"
                           f"üí∞ Comparaci√≥n de precios\n"
                           f"üì± Contacto directo disponible")
        
    def log_family_activity(self, member, activity_type, description):
        """Registrar actividad familiar en BD"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO family_activities (member_name, activity_type, description)
                VALUES (?, ?, ?)
            ''', (member, activity_type, description))
            
            conn.commit()
            conn.close()
            
        except Exception as e:
            print(f"Error logging activity: {e}")
            
    def show_startup_banners(self):
        """Mostrar banners de bienvenida al iniciar"""
        # Banner principal de bienvenida
        banner_window = tk.Toplevel(self.root)
        banner_window.title("üá®üá∑ NexusOptim IA - Bienvenida")
        banner_window.geometry("800x600")
        banner_window.configure(bg='#0f1419')
        banner_window.resizable(False, False)
        
        # Centrar ventana
        banner_window.transient(self.root)
        banner_window.grab_set()
        
        # Canvas para animaciones
        canvas = Canvas(banner_window, width=800, height=600, bg='#0f1419', highlightthickness=0)
        canvas.pack(fill='both', expand=True)
        
        # Banner principal animado
        canvas.create_rectangle(0, 0, 800, 150, fill='#00d4aa', outline='')
        canvas.create_text(400, 50, text="üá®üá∑ NEXUSOPTIM IA", font=('Arial', 28, 'bold'), fill='black')
        canvas.create_text(400, 90, text="HOGAR INTELIGENTE COSTARRICENSE", font=('Arial', 16, 'bold'), fill='#0f1419')
        canvas.create_text(400, 120, text="¬°Pura Vida Tecnol√≥gica!", font=('Arial', 12), fill='#0f1419')
        
        # Informaci√≥n de bienvenida
        welcome_text = """
üè† ¬°BIENVENIDA FAMILIA COSTARRICENSE!

‚ú® Tu hogar ahora es m√°s inteligente con NexusOptim IA
ü§ñ Asistente familiar personalizado activado
üìö Educaci√≥n personalizada para toda la familia
üè° Automatizaci√≥n del hogar configurada
üí∞ Gesti√≥n financiera familiar inteligente
üè• Monitoreo de salud y bienestar familiar
üá®üá∑ Servicios locales de Costa Rica integrados

üÜï NUEVAS CARACTER√çSTICAS:
üö® Sistema de reportes de aver√≠as de infraestructura
‚ö° Reporta transformadores, cableado, fugas y m√°s
üìû Conexi√≥n directa con servicios de emergencia
üîß Seguimiento en tiempo real de reparaciones

üéØ MISI√ìN: Democratizar la IA en todos los hogares de Costa Rica
üöÄ VISI√ìN: Costa Rica l√≠der mundial en hogares inteligentes

        """
        
        canvas.create_text(400, 380, text=welcome_text, font=('Arial', 11), fill='white', justify='center')
        
        # Botones de acci√≥n
        def close_banner():
            banner_window.destroy()
            
        def show_tour():
            banner_window.destroy()
            self.show_guided_tour()
            
        close_btn = tk.Button(banner_window, text="‚úÖ Continuar al Hogar", 
                             command=close_banner,
                             bg='#00d4aa', fg='black', font=('Arial', 12, 'bold'))
        close_btn.place(x=500, y=550, width=200, height=40)
        
        tour_btn = tk.Button(banner_window, text="üéØ Tour Guiado", 
                            command=show_tour,
                            bg='#4a9eff', fg='white', font=('Arial', 12, 'bold'))
        tour_btn.place(x=100, y=550, width=200, height=40)
        
        # Auto-close despu√©s de 8 segundos
        banner_window.after(8000, close_banner)
        
    def show_guided_tour(self):
        """Mostrar tour guiado de caracter√≠sticas"""
        tour_window = tk.Toplevel(self.root)
        tour_window.title("üéØ Tour Guiado - NexusOptim IA")
        tour_window.geometry("700x500")
        tour_window.configure(bg='#1e2328')
        
        tour_info = """
üéØ TOUR GUIADO - NEXUSOPTIM IA HOGAR INTELIGENTE

üì± NAVEGACI√ìN PRINCIPAL:
‚Ä¢ üè† Casa: Dashboard familiar principal
‚Ä¢ üéì Educaci√≥n: Contenido personalizado por edad
‚Ä¢ üé¨ Entretenimiento: Recomendaciones familiares
‚Ä¢ üè† Casa Inteligente: Control de dispositivos
‚Ä¢ üí∞ Finanzas: Gesti√≥n econ√≥mica familiar
‚Ä¢ üè• Salud: Bienestar de toda la familia
‚Ä¢ üá®üá∑ Servicios CR: Comercios y servicios locales
‚Ä¢ üö® Reportes Aver√≠as: ¬°NUEVA FUNCI√ìN!

üö® SISTEMA DE REPORTES DE AVER√çAS:
‚Ä¢ Reporta transformadores da√±ados ‚ö°
‚Ä¢ Cableado peligroso expuesto üîå
‚Ä¢ Fugas de agua masivas üíß
‚Ä¢ Choques contra postes üöó
‚Ä¢ Incendios el√©ctricos üî•
‚Ä¢ Torres de comunicaciones üì°

üìû CONEXI√ìN AUTOM√ÅTICA:
‚Ä¢ ICE - Electricidad y telecomunicaciones
‚Ä¢ AyA - Servicios de agua
‚Ä¢ Municipalidades - Infraestructura local
‚Ä¢ Servicios de emergencia - 911
‚Ä¢ Tr√°nsito - Accidentes vehiculares

üîÑ SEGUIMIENTO EN TIEMPO REAL:
‚Ä¢ Estado: Pendiente ‚Üí En proceso ‚Üí Resuelto
‚Ä¢ T√©cnico asignado y tiempo estimado
‚Ä¢ Notificaciones de progreso
‚Ä¢ Historial completo de reportes

üí° CONSEJOS DE USO:
1. Mant√©n actualizada tu informaci√≥n de contacto
2. S√© espec√≠fico con las ubicaciones
3. Usa fotos si es posible (pr√≥ximamente)
4. Reporta solo aver√≠as reales para no saturar
5. Prioriza correctamente la urgencia

üÜò EMERGENCIAS CR√çTICAS:
Para peligro inmediato de vida, llama al 911
NexusOptim IA complementa pero no reemplaza emergencias
        """
        
        tour_label = tk.Label(tour_window, text=tour_info, bg='#1e2328', fg='white', 
                             font=('Arial', 10), justify=tk.LEFT)
        tour_label.pack(pady=20, padx=20, fill='both', expand=True)
        
        tk.Button(tour_window, text="‚úÖ Entendido, ¬°Empecemos!", 
                 command=tour_window.destroy,
                 bg='#00d4aa', fg='black', font=('Arial', 12, 'bold')).pack(pady=20)
        
    def quick_damage_report(self, damage_type, description):
        """Reporte r√°pido de aver√≠a"""
        # Pre-llenar formulario
        self.damage_type_var.set(damage_type.split(' ')[0])  # Primera palabra
        self.description_text.delete('1.0', tk.END)
        self.description_text.insert('1.0', f"REPORTE R√ÅPIDO: {description}\n\nDetalle adicional:")
        self.priority_var.set('Cr√≠tica')
        
        # Enfocar el notebook en la tab de reportes
        self.notebook.select(7)  # Tab de reportes (√≠ndice 7)
        
        messagebox.showinfo("üö® Reporte R√°pido", 
                           f"Formulario pre-configurado para:\n{damage_type}\n\n"
                           f"Por favor complete:\n"
                           f"‚Ä¢ Ubicaci√≥n exacta\n"
                           f"‚Ä¢ Sus datos de contacto\n"
                           f"‚Ä¢ Detalles adicionales\n\n"
                           f"Luego presione 'ENVIAR REPORTE'")
        
    def submit_damage_report(self):
        """Enviar reporte de aver√≠a"""
        # Validar campos obligatorios
        if not self.location_entry.get() or self.location_entry.get().startswith("Ej:"):
            messagebox.showerror("Error", "Por favor ingrese la ubicaci√≥n exacta")
            return
            
        if not self.reporter_name_entry.get():
            messagebox.showerror("Error", "Por favor ingrese su nombre")
            return
            
        if not self.reporter_phone_entry.get():
            messagebox.showerror("Error", "Por favor ingrese su tel√©fono")
            return
            
        # Generar ID √∫nico de reporte
        report_id = f"CR-{uuid.uuid4().hex[:8].upper()}"
        
        # Datos del reporte
        report_data = {
            'report_id': report_id,
            'report_type': self.damage_type_var.get(),
            'location': self.location_entry.get(),
            'description': self.description_text.get('1.0', tk.END).strip(),
            'priority': self.priority_var.get(),
            'reporter_name': self.reporter_name_entry.get(),
            'contact_info': self.reporter_phone_entry.get(),
            'coordinates': f"{self.family_config['location']} - GPS: Pendiente",  # Simulated
            'status': 'pendiente',
            'estimated_repair_time': self.estimate_repair_time()
        }
        
        # Guardar en base de datos
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO damage_reports 
                (report_id, report_type, location, description, priority, 
                 reporter_name, contact_info, coordinates, status, estimated_repair_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (report_data['report_id'], report_data['report_type'], 
                  report_data['location'], report_data['description'], 
                  report_data['priority'], report_data['reporter_name'],
                  report_data['contact_info'], report_data['coordinates'],
                  report_data['status'], report_data['estimated_repair_time']))
            
            conn.commit()
            conn.close()
            
            # Mostrar confirmaci√≥n
            messagebox.showinfo("‚úÖ Reporte Enviado", 
                               f"Reporte registrado exitosamente\n\n"
                               f"üÜî ID: {report_id}\n"
                               f"üîß Tipo: {report_data['report_type']}\n"
                               f"üìç Ubicaci√≥n: {report_data['location'][:50]}...\n"
                               f"üö® Prioridad: {report_data['priority']}\n"
                               f"‚è±Ô∏è Tiempo estimado: {report_data['estimated_repair_time']}\n\n"
                               f"üìû Recibir√° notificaciones al: {report_data['contact_info']}\n"
                               f"üîÑ Estado: En revisi√≥n por t√©cnicos\n\n"
                               f"¬°Gracias por ayudar a mejorar Costa Rica!")
            
            # Limpiar formulario
            self.clear_form()
            
            # Actualizar lista de reportes
            self.load_recent_reports()
            
            # Simular notificaci√≥n a autoridades
            self.simulate_authority_notification(report_data)
            
        except Exception as e:
            messagebox.showerror("Error", f"Error al guardar reporte:\n{e}")
            
    def estimate_repair_time(self):
        """Estimar tiempo de reparaci√≥n seg√∫n tipo"""
        damage_type = self.damage_type_var.get()
        priority = self.priority_var.get()
        
        repair_times = {
            'Transformador': {'Cr√≠tica': '2-4 horas', 'Alta': '4-8 horas', 'Media': '1-2 d√≠as'},
            'Cableado El√©ctrico': {'Cr√≠tica': '1-2 horas', 'Alta': '2-4 horas', 'Media': '4-8 horas'},
            'Tuber√≠a de Agua': {'Cr√≠tica': '30min-2h', 'Alta': '2-4 horas', 'Media': '4-8 horas'},
            'Poste de Electricidad': {'Cr√≠tica': '3-6 horas', 'Alta': '6-12 horas', 'Media': '1-3 d√≠as'},
            'Sem√°foro': {'Cr√≠tica': '1-2 horas', 'Alta': '2-4 horas', 'Media': '4-8 horas'},
            'Torre de Comunicaciones': {'Cr√≠tica': '4-8 horas', 'Alta': '8-16 horas', 'Media': '1-3 d√≠as'},
            'Alcantarillado': {'Cr√≠tica': '2-4 horas', 'Alta': '4-8 horas', 'Media': '1-2 d√≠as'},
            'Alumbrado P√∫blico': {'Cr√≠tica': '1-2 horas', 'Alta': '2-6 horas', 'Media': '6-12 horas'},
            'Otro': {'Cr√≠tica': '2-4 horas', 'Alta': '4-8 horas', 'Media': '1-2 d√≠as'}
        }
        
        return repair_times.get(damage_type, repair_times['Otro']).get(priority, '4-8 horas')
        
    def simulate_authority_notification(self, report_data):
        """Simular notificaci√≥n a autoridades competentes"""
        authority_map = {
            'Transformador': 'ICE - Electricidad',
            'Cableado El√©ctrico': 'ICE - Electricidad', 
            'Tuber√≠a de Agua': 'AyA - Acueductos y Alcantarillados',
            'Poste de Electricidad': 'ICE - Electricidad',
            'Sem√°foro': 'COSEVI - Tr√°nsito',
            'Torre de Comunicaciones': 'ICE - Telecomunicaciones',
            'Alcantarillado': 'AyA - Acueductos y Alcantarillados',
            'Alumbrado P√∫blico': 'Municipalidad Local',
            'Otro': 'Servicios de Emergencia'
        }
        
        authority = authority_map.get(report_data['report_type'], 'Servicios Generales')
        
        # Simular env√≠o
        threading.Thread(target=self.async_authority_notification, 
                        args=(report_data, authority), daemon=True).start()
        
    def async_authority_notification(self, report_data, authority):
        """Notificaci√≥n as√≠ncrona a autoridades"""
        time.sleep(2)  # Simular procesamiento
        
        print(f"\nüì° NOTIFICACI√ìN ENVIADA A {authority.upper()}")
        print(f"üÜî Reporte: {report_data['report_id']}")
        print(f"üîß Tipo: {report_data['report_type']}")
        print(f"üìç Ubicaci√≥n: {report_data['location']}")
        print(f"üö® Prioridad: {report_data['priority']}")
        print(f"üë§ Reportante: {report_data['reporter_name']}")
        print(f"üìû Contacto: {report_data['contact_info']}")
        print("‚úÖ T√©cnicos ser√°n despachados seg√∫n disponibilidad\n")
        
    def view_my_reports(self):
        """Ver reportes del usuario"""
        reports_window = tk.Toplevel(self.root)
        reports_window.title("üìã Mis Reportes de Aver√≠as")
        reports_window.geometry("800x600")
        reports_window.configure(bg='#1e2328')
        
        # Cargar reportes
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT report_id, report_type, location, priority, status, 
                       timestamp, estimated_repair_time
                FROM damage_reports 
                ORDER BY timestamp DESC
                LIMIT 20
            ''')
            
            reports = cursor.fetchall()
            conn.close()
            
            if not reports:
                tk.Label(reports_window, text="üìã No tienes reportes registrados", 
                        bg='#1e2328', fg='white', font=('Arial', 14)).pack(pady=50)
                return
                
            # Mostrar reportes en tabla
            reports_text = scrolledtext.ScrolledText(reports_window, width=90, height=30,
                                                    bg='#0f1419', fg='white', font=('Courier', 10))
            reports_text.pack(pady=20, padx=20, fill='both', expand=True)
            
            header = "ID REPORTE    | TIPO              | UBICACI√ìN                    | PRIORIDAD | ESTADO     | FECHA/HORA        | T. ESTIMADO\n"
            header += "=" * 130 + "\n"
            reports_text.insert('1.0', header)
            
            for report in reports:
                report_id, report_type, location, priority, status, timestamp, est_time = report
                
                # Truncar textos largos
                location_short = location[:25] + "..." if len(location) > 25 else location
                
                # Color seg√∫n estado
                status_display = status.upper()
                if status == 'pendiente':
                    status_display = f"üü° {status_display}"
                elif status == 'en_proceso':
                    status_display = f"üîµ EN PROCESO"
                elif status == 'resuelto':
                    status_display = f"üü¢ RESUELTO"
                    
                line = f"{report_id:<12} | {report_type:<16} | {location_short:<27} | {priority:<9} | {status_display:<10} | {timestamp[:16]:<17} | {est_time}\n"
                reports_text.insert(tk.END, line)
                
        except Exception as e:
            tk.Label(reports_window, text=f"Error cargando reportes: {e}", 
                    bg='#1e2328', fg='red', font=('Arial', 12)).pack(pady=50)
        
    def clear_form(self):
        """Limpiar formulario de reportes"""
        self.damage_type_var.set('Transformador')
        self.location_entry.delete(0, tk.END)
        self.location_entry.insert(0, "Ej: 200m sur de la iglesia de San Pedro, Montes de Oca")
        self.description_text.delete('1.0', tk.END)
        self.description_text.insert('1.0', "Describa detalladamente el problema observado...")
        self.reporter_name_entry.delete(0, tk.END)
        self.reporter_phone_entry.delete(0, tk.END)
        self.priority_var.set('Media')
        
    def load_recent_reports(self):
        """Cargar reportes recientes para mostrar estado"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                SELECT report_id, report_type, status, timestamp, estimated_repair_time
                FROM damage_reports 
                ORDER BY timestamp DESC
                LIMIT 10
            ''')
            
            reports = cursor.fetchall()
            conn.close()
            
            self.reports_status_text.delete('1.0', tk.END)
            
            if not reports:
                self.reports_status_text.insert('1.0', "üìã No hay reportes registrados a√∫n.\n¬°S√© el primero en reportar una aver√≠a para mejorar Costa Rica!")
                return
                
            status_text = "üìä ESTADO DE REPORTES RECIENTES:\n\n"
            
            for report in reports:
                report_id, report_type, status, timestamp, est_time = report
                
                status_emoji = "üü°" if status == 'pendiente' else "üîµ" if status == 'en_proceso' else "üü¢"
                status_text += f"{status_emoji} {report_id} | {report_type} | {status.upper()} | {timestamp[:16]} | ‚è±Ô∏è{est_time}\n"
                
            self.reports_status_text.insert('1.0', status_text)
            
        except Exception as e:
            self.reports_status_text.delete('1.0', tk.END)
            self.reports_status_text.insert('1.0', f"Error cargando reportes: {e}")
            
    def start_home_services(self):
        """Iniciar servicios del hogar"""
        def services_thread():
            while True:
                try:
                    # Simular actividades del hogar
                    time.sleep(30)
                    
                    activities = [
                        "ü§ñ IA optimiz√≥ temperatura del hogar",
                        "üì± Recordatorio familiar programado", 
                        "üîí Sistema de seguridad verificado",
                        "üí° Luces ajustadas autom√°ticamente",
                        "üìä Reporte de uso energ√©tico actualizado",
                        "üéµ Playlist familiar personalizada lista",
                        "üçΩÔ∏è Sugerencia de men√∫ saludable generada",
                        "üìö Nuevo contenido educativo disponible"
                    ]
                    
                    activity = random.choice(activities)
                    print(f"[{datetime.now().strftime('%H:%M:%S')}] {activity}")
                    
                    # Actualizar alg√∫n estado ocasionalmente
                    if random.random() < 0.3:
                        self.home_status['temperature'] = random.randint(22, 26)
                        self.home_status['energy_usage'] = random.randint(70, 95)
                        
                except Exception as e:
                    print(f"Error in home services: {e}")
                    time.sleep(60)
                    
        threading.Thread(target=services_thread, daemon=True).start()

def main():
    """Funci√≥n principal de la versi√≥n dom√©stica"""
    try:
        app = NexusOptimHomeEdition()
        app.root.mainloop()
    except Exception as e:
        messagebox.showerror("Error", f"Error launching NexusOptim IA Home Edition:\n{e}")

if __name__ == "__main__":
    main()
